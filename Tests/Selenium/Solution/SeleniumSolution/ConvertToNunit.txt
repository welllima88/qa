#region MSTest/NUnit Compatability

// Define MSTEST as a conditional compilation symbol in your DEBUG build then you can do testing with your DEBUG test builds
// directly in Visual Studio. This also means you can debug your tests.
// Note, if you use any MSTest specific functionality that is NOT available in NUnit, it WILL NOT WORK in NUnit!
// Such functionality includes any direct use of TestContext, any web service related attributes and other stuff I haven’t yet dug up but know exists!
// Any NUnit functionality WILL work in MSTest since the NUnit Assert is THE Assert class and the NUnit.Framework assembly
// is referenced and used. Any test assemblies that have been built with MSTEST specified will NOT work in NUnit, therefore
// it is suggested that from time to time you create a Release build of your tests. If you have used any MSTest only functionality
// then your build (and consequently the build of your test on the build server) will FAIL. Check it!
// Note, ensure your test is in DEBUG build before using VS to create unit tests or it will add MSTest usings into your Release build!

#if !MSTEST
#if DEBUG
#error ******* DEBUG builds should define MSTEST as a Conditional Compilation Symbol in Project Properties->Build Tab ************
#else
#warning ******* Test is compiled for NUnit ************
#endif
using NUnit.Framework;
using NUnit.Framework.Constraints;

// The following using declarations allow the Visual Studio autogenerated framework to actually use NUnit attributes.
// This means that where in the test code below we see the VS generated [TestClass()] attribute, it is “really” [TestFixture],
// i.e. NUnit style with MSTest syntax – which gets autogenerated and is thus easier to “write” as VS does it for you. :)

using TestClass = NUnit.Framework.TestFixtureAttribute;
using TestMethod = NUnit.Framework.TestAttribute;
using TestCleanup = NUnit.Framework.TearDownAttribute;
using TestInitialize = NUnit.Framework.SetUpAttribute;
using ClassCleanup = NUnit.Framework.TestFixtureTearDownAttribute;
using ClassInitialize = NUnit.Framework.TestFixtureSetUpAttribute;
using TestContext = System.Object;
#else
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UnitTesting.Web;
using Category = Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute;
#endif

// Since NUnit’s Assert is a superset of MSTest’s Assert, we’ll treat Assert as the NUnit version and get the extra goodies.
using Assert = NUnit.Framework.Assert;

#endregion